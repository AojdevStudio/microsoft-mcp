orchestration:
  issue: "Issue #3 - KamDental Email Framework"
  description: "Professional email styling system for KamDental practice analytics"
  workspace: "/root/repo/.claude/issue-3-workspace"
  
  phases:
    phase_1_explore:
      name: "Explore & Analyze"
      weight: 10
      tasks:
        - id: "analyze_existing_email"
          description: "Analyze current email functionality in tools.py"
          status: "complete"
          findings:
            - "Email sending uses ensure_html_structure() for HTML formatting"
            - "Inline styles are already implemented but limited"
            - "Signature is hardcoded in the function"
            - "Basic styling exists but not component-based"
            
        - id: "review_visual_mocks"
          description: "Review visual mockups and design requirements"
          status: "complete"
          findings:
            - "Three themes required: Baytown (blue), Humble (purple), Executive (dark)"
            - "Component library: metrics, providers, alerts, recommendations"
            - "Professional styling with specific color schemes"
            - "Responsive design required"
            
        - id: "understand_integration"
          description: "Understand Microsoft Graph integration"
          status: "complete"
          findings:
            - "Graph API handled through graph.py request function"
            - "Authentication via auth.py with MSAL"
            - "Email sent via POST /me/sendMail endpoint"
            - "Support for attachments and multi-recipient"
    
    phase_2_plan:
      name: "Design & Architecture"
      weight: 20
      tasks:
        - id: "design_css_framework"
          description: "Design modular CSS framework architecture"
          components:
            - "core/: CSS variables, reset, utilities"
            - "components/: reusable UI components"  
            - "themes/: theme-specific overrides"
            - "CSS inliner for email compatibility"
            
        - id: "design_template_system"
          description: "Design Python template system"
          components:
            - "EmailTemplate base class with render() method"
            - "Specialized templates inheriting from base"
            - "Data validation and processing"
            - "Theme auto-selection logic"
            
        - id: "plan_mcp_integration"
          description: "Plan MCP tool integration"
          tools:
            - "send_practice_report"
            - "send_executive_summary"
            - "send_provider_update"
            - "send_alert_notification"
    
    phase_3_write_tests:
      name: "Test-Driven Development"
      weight: 30
      test_suites:
        - "test_templates.py: Template rendering tests"
        - "test_css_inliner.py: CSS inlining tests"
        - "test_mcp_integration.py: Tool integration tests"
        - "test_email_client_compatibility.py: Compatibility tests"
        - "test_performance.py: Performance benchmarks"
    
    phase_4_code:
      name: "Implementation"
      weight: 60
      implementation_order:
        1: "CSS framework foundation"
        2: "Component CSS files"
        3: "Theme CSS files"
        4: "Template base class"
        5: "Specialized templates"
        6: "CSS inliner utility"
        7: "MCP tool integration"
        8: "Integration with existing send_email"
    
    phase_5_refactor:
      name: "Optimization & Polish"
      weight: 75
      focus_areas:
        - "Email client compatibility fixes"
        - "Performance optimization"
        - "Code organization"
        - "Error handling improvements"
    
    phase_6_validate:
      name: "Comprehensive Testing"
      weight: 90
      validation_steps:
        - "Run all test suites"
        - "Manual email client testing"
        - "Performance benchmarks"
        - "Accessibility validation"
    
    phase_7_writeup:
      name: "Documentation & PR"
      weight: 100
      deliverables:
        - "Implementation documentation"
        - "Usage examples"
        - "Migration guide"
        - "PR description"
  
  execution_strategy:
    approach: "Sequential with iterative refinement"
    testing: "TDD with comprehensive test coverage"
    integration: "Preserve backward compatibility"
    quality: "Professional, maintainable, performant"