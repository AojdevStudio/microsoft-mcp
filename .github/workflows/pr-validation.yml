name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

# Minimal permissions for security
permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: "3.12"

jobs:
  # PR validation and checks
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          # Checkout PR HEAD, not merge commit
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: ${{ runner.os }}-pr-validation-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-pr-validation-

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Validate PR structure
        id: pr-structure
        run: |
          echo "## 📋 PR Validation Results" >> pr-validation.md
          echo "" >> pr-validation.md
          
          # Check PR title format
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "### PR Title Analysis" >> pr-validation.md
          echo "**Title**: $PR_TITLE" >> pr-validation.md
          
          # Check if title starts with conventional commit type
          if [[ "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|ci|perf|build)(\(.+\))?: ]]; then
            echo "✅ Title follows conventional commit format" >> pr-validation.md
            echo "title-valid=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Title doesn't follow conventional commit format" >> pr-validation.md
            echo "Consider using: feat/fix/docs/etc: description" >> pr-validation.md
            echo "title-valid=false" >> $GITHUB_OUTPUT
          fi
          
          # Check PR description
          PR_BODY="${{ github.event.pull_request.body }}"
          if [[ -n "$PR_BODY" && ${#PR_BODY} -gt 20 ]]; then
            echo "✅ PR has descriptive body" >> pr-validation.md
            echo "body-valid=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ PR description is too short or missing" >> pr-validation.md
            echo "body-valid=false" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> pr-validation.md

      - name: Check file changes
        id: file-changes
        run: |
          echo "### Changed Files Analysis" >> pr-validation.md
          
          # Get list of changed files
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD > changed-files.txt
          
          TOTAL_FILES=$(wc -l < changed-files.txt)
          echo "**Total files changed**: $TOTAL_FILES" >> pr-validation.md
          echo "" >> pr-validation.md
          
          # Categorize changes
          PYTHON_FILES=$(grep '\.py$' changed-files.txt | wc -l || echo "0")
          TEST_FILES=$(grep '^tests/' changed-files.txt | wc -l || echo "0")
          WORKFLOW_FILES=$(grep '^\.github/workflows/' changed-files.txt | wc -l || echo "0")
          DOC_FILES=$(grep -E '\.(md|rst|txt)$' changed-files.txt | wc -l || echo "0")
          
          echo "**File type breakdown**:" >> pr-validation.md
          echo "- Python files: $PYTHON_FILES" >> pr-validation.md
          echo "- Test files: $TEST_FILES" >> pr-validation.md
          echo "- Workflow files: $WORKFLOW_FILES" >> pr-validation.md
          echo "- Documentation files: $DOC_FILES" >> pr-validation.md
          echo "" >> pr-validation.md
          
          # Check if tests were added for new Python files
          if [[ $PYTHON_FILES -gt 0 && $TEST_FILES -eq 0 ]]; then
            echo "⚠️ Python files changed but no test files modified" >> pr-validation.md
            echo "Consider adding or updating tests" >> pr-validation.md
            echo "tests-needed=true" >> $GITHUB_OUTPUT
          else
            echo "tests-needed=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for large PR
          if [[ $TOTAL_FILES -gt 20 ]]; then
            echo "⚠️ Large PR detected ($TOTAL_FILES files)" >> pr-validation.md
            echo "Consider breaking into smaller PRs" >> pr-validation.md
            echo "large-pr=true" >> $GITHUB_OUTPUT
          else
            echo "large-pr=false" >> $GITHUB_OUTPUT
          fi

      - name: Run quick code quality check
        run: |
          echo "### Code Quality Check" >> pr-validation.md
          
          # Run linting on changed Python files only
          CHANGED_PYTHON_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep '\.py$' || echo "")
          
          if [[ -n "$CHANGED_PYTHON_FILES" ]]; then
            echo "**Linting results**:" >> pr-validation.md
            echo '```' >> pr-validation.md
            uv run python -m ruff check $CHANGED_PYTHON_FILES --output-format=text >> pr-validation.md || echo "Linting issues found" >> pr-validation.md
            echo '```' >> pr-validation.md
            echo "" >> pr-validation.md
            
            # Check formatting
            echo "**Formatting check**:" >> pr-validation.md
            if uv run python -m ruff format --check $CHANGED_PYTHON_FILES; then
              echo "✅ Code formatting is correct" >> pr-validation.md
            else
              echo "❌ Code formatting issues found" >> pr-validation.md
              echo "Run \`uv run python -m ruff format\` to fix" >> pr-validation.md
            fi
          else
            echo "No Python files changed, skipping code quality check" >> pr-validation.md
          fi
          echo "" >> pr-validation.md

      - name: Check for breaking changes
        run: |
          echo "### Breaking Changes Check" >> pr-validation.md
          
          # Check if version was bumped
          if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD --name-only | grep -q "pyproject.toml"; then
            if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD pyproject.toml | grep -q "^+version"; then
              echo "✅ Version was bumped in pyproject.toml" >> pr-validation.md
            else
              echo "⚠️ pyproject.toml changed but version not bumped" >> pr-validation.md
            fi
          fi
          
          # Check for changes to public API (tools.py, server.py)
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "(tools\.py|server\.py)"; then
            echo "⚠️ Public API files changed - review for breaking changes" >> pr-validation.md
            echo "Files affected: $(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E "(tools\.py|server\.py)" | tr '\n' ' ')" >> pr-validation.md
          fi
          
          echo "" >> pr-validation.md

      - name: Security quick scan
        run: |
          echo "### Security Quick Scan" >> pr-validation.md
          
          # Check for potential secrets in diff
          if git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -i -E "(password|secret|key|token)" | grep -v "test"; then
            echo "⚠️ Potential secrets found in changes:" >> pr-validation.md
            echo '```' >> pr-validation.md
            git diff origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -i -E "(password|secret|key|token)" | grep -v "test" >> pr-validation.md
            echo '```' >> pr-validation.md
          else
            echo "✅ No obvious secrets found in changes" >> pr-validation.md
          fi
          echo "" >> pr-validation.md

      - name: Add PR comment with validation results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const validationResults = fs.readFileSync('pr-validation.md', 'utf8');
            
            // Find existing validation comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('📋 PR Validation Results')
            );
            
            const commentBody = validationResults + '\n\n---\n*This comment is automatically updated on each push*';
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: commentBody
              });
            }

      - name: Check PR readiness
        run: |
          TITLE_VALID="${{ steps.pr-structure.outputs.title-valid }}"
          BODY_VALID="${{ steps.pr-structure.outputs.body-valid }}"
          TESTS_NEEDED="${{ steps.file-changes.outputs.tests-needed }}"
          LARGE_PR="${{ steps.file-changes.outputs.large-pr }}"
          
          echo "## PR Readiness Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Title format**: $([[ \"$TITLE_VALID\" == \"true\" ]] && echo \"✅ Valid\" || echo \"⚠️  Needs improvement\")" >> $GITHUB_STEP_SUMMARY
          echo "- **Description**: $([[ \"$BODY_VALID\" == \"true\" ]] && echo \"✅ Adequate\" || echo \"⚠️  Too short\")" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests coverage**: $([[ \"$TESTS_NEEDED\" == \"false\" ]] && echo \"✅ Adequate\" || echo \"⚠️  May need tests\")" >> $GITHUB_STEP_SUMMARY
          echo "- **PR size**: $([[ \"$LARGE_PR\" == \"false\" ]] && echo \"✅ Manageable\" || echo \"⚠️  Large PR\")" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [[ "$TITLE_VALID" == "true" && "$BODY_VALID" == "true" ]]; then
            echo "✅ PR meets basic quality standards" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ PR could be improved before review" >> $GITHUB_STEP_SUMMARY
          fi

  # Run CI pipeline on PR
  run-ci:
    name: Run CI Pipeline
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # PR size and complexity analysis
  pr-analysis:
    name: PR Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Analyze PR complexity
        run: |
          echo "## 📊 PR Complexity Analysis" >> pr-analysis.md
          echo "" >> pr-analysis.md
          
          # Calculate diff stats
          ADDED_LINES=$(git diff --shortstat origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -o '[0-9]\+ insertion' | grep -o '[0-9]\+' || echo "0")
          DELETED_LINES=$(git diff --shortstat origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -o '[0-9]\+ deletion' | grep -o '[0-9]\+' || echo "0")
          
          echo "**Code changes**:" >> pr-analysis.md
          echo "- Lines added: $ADDED_LINES" >> pr-analysis.md
          echo "- Lines deleted: $DELETED_LINES" >> pr-analysis.md
          echo "- Net change: $((ADDED_LINES - DELETED_LINES))" >> pr-analysis.md
          echo "" >> pr-analysis.md
          
          # Complexity scoring
          COMPLEXITY_SCORE=0
          
          if [[ $ADDED_LINES -gt 500 ]]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 3))
          elif [[ $ADDED_LINES -gt 200 ]]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 2))
          elif [[ $ADDED_LINES -gt 50 ]]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 1))
          fi
          
          FILES_CHANGED=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | wc -l)
          if [[ $FILES_CHANGED -gt 20 ]]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 2))
          elif [[ $FILES_CHANGED -gt 10 ]]; then
            COMPLEXITY_SCORE=$((COMPLEXITY_SCORE + 1))
          fi
          
          echo "**Complexity assessment**:" >> pr-analysis.md
          case $COMPLEXITY_SCORE in
            0|1)
              echo "🟢 **Low complexity** - Easy to review" >> pr-analysis.md
              ;;
            2|3)
              echo "🟡 **Medium complexity** - Standard review needed" >> pr-analysis.md
              ;;
            *)
              echo "🔴 **High complexity** - Thorough review required" >> pr-analysis.md
              ;;
          esac
          echo "" >> pr-analysis.md
          
          # Suggest reviewers based on changed files
          echo "**Suggested focus areas**:" >> pr-analysis.md
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q "email_framework"; then
            echo "- 📧 Email framework changes" >> pr-analysis.md
          fi
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q "tools\.py"; then
            echo "- 🔧 API tools changes" >> pr-analysis.md
          fi
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q "auth\.py"; then
            echo "- 🔐 Authentication changes" >> pr-analysis.md
          fi
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q "test"; then
            echo "- 🧪 Test changes" >> pr-analysis.md
          fi
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q "\.md$"; then
            echo "- 📖 Documentation changes" >> pr-analysis.md
          fi

      - name: Upload PR analysis
        uses: actions/upload-artifact@v4
        with:
          name: pr-analysis-${{ github.event.pull_request.number }}
          path: pr-analysis.md
          retention-days: 30

  # Auto-assignment and labeling
  auto-triage:
    name: Auto Triage
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Auto-label PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: pull_number } = context.payload.pull_request;
            
            // Get changed files
            const files = await github.rest.pulls.listFiles({
              owner,
              repo,
              pull_number
            });
            
            const changedFiles = files.data.map(file => file.filename);
            const labels = [];
            
            // Determine labels based on changed files
            if (changedFiles.some(file => file.includes('email_framework'))) {
              labels.push('email-framework');
            }
            
            if (changedFiles.some(file => file.includes('test'))) {
              labels.push('tests');
            }
            
            if (changedFiles.some(file => file.endsWith('.md'))) {
              labels.push('documentation');
            }
            
            if (changedFiles.some(file => file.includes('.github/workflows'))) {
              labels.push('ci/cd');
            }
            
            if (changedFiles.some(file => file.includes('tools.py'))) {
              labels.push('api');
            }
            
            if (changedFiles.some(file => file.includes('auth.py'))) {
              labels.push('authentication');
            }
            
            // Determine size label
            const totalChanges = files.data.reduce((sum, file) => sum + file.changes, 0);
            if (totalChanges > 500) {
              labels.push('size/XL');
            } else if (totalChanges > 200) {
              labels.push('size/L');
            } else if (totalChanges > 50) {
              labels.push('size/M');
            } else {
              labels.push('size/S');
            }
            
            // Determine type from PR title
            const title = context.payload.pull_request.title.toLowerCase();
            if (title.startsWith('feat')) {
              labels.push('enhancement');
            } else if (title.startsWith('fix')) {
              labels.push('bug');
            } else if (title.startsWith('docs')) {
              labels.push('documentation');
            } else if (title.startsWith('chore')) {
              labels.push('maintenance');
            }
            
            // Add labels if any were determined
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: pull_number,
                labels
              });
            }
            
            console.log(`Added labels: ${labels.join(', ')}`);

      - name: Request review from code owners
        uses: actions/github-script@v7
        with:
          script: |
            // This would typically use a CODEOWNERS file to determine reviewers
            // For now, we'll add a comment suggesting review
            const { owner, repo } = context.repo;
            const { number: pull_number } = context.payload.pull_request;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pull_number,
              body: `👋 Thanks for the contribution! This PR has been automatically triaged and labeled.
              
**Next steps:**
1. ✅ Automated checks are running
2. 👀 Manual review will be needed
3. 🚀 Once approved, this can be merged

Please ensure all checks pass and address any feedback from reviewers.`
            });