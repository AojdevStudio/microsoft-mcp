name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Create a pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write
  packages: write

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Validate release conditions
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            # Extract version from tag (remove 'v' prefix)
            VERSION="${GITHUB_REF#refs/tags/v}"
            # Check if it's a prerelease (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

  # Run full test suite before release
  pre-release-tests:
    name: Pre-Release Tests
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Build release artifacts
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: [validate-release, pre-release-tests]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Update version in pyproject.toml
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "🔖 Bump version to $VERSION" || echo "No changes to commit"

      - name: Build package
        run: |
          uv build

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog using the utils script
          if [[ -f "scripts/changelog/utils.py" ]]; then
            echo "Generating changelog..."
            uv run python scripts/changelog/utils.py > RELEASE_CHANGELOG.md
          else
            echo "No changelog generator found, creating basic changelog..."
            echo "## Changes in v${{ needs.validate-release.outputs.version }}" > RELEASE_CHANGELOG.md
            echo "" >> RELEASE_CHANGELOG.md
            echo "See commit history for detailed changes." >> RELEASE_CHANGELOG.md
          fi
          
          # Read changelog for release notes
          CHANGELOG=$(cat RELEASE_CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: |
            dist/
            RELEASE_CHANGELOG.md
          retention-days: 90

      - name: Verify package integrity
        run: |
          # Verify the built package
          uv run python -m twine check dist/*
          
          # Test installation
          uv run --isolated pip install dist/*.whl
          
          # Smoke test
          MICROSOFT_MCP_CLIENT_ID=test-release-${{ github.run_id }} uv run --isolated python -c "
          import microsoft_mcp
          print(f'Microsoft MCP version: {microsoft_mcp.__version__ if hasattr(microsoft_mcp, \"__version__\") else \"unknown\"}')
          print('✅ Package smoke test passed')
          "

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: ./release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          name: Microsoft MCP v${{ needs.validate-release.outputs.version }}
          body_path: ./release-artifacts/RELEASE_CHANGELOG.md
          files: |
            ./release-artifacts/dist/*
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          generate_release_notes: true
          make_latest: ${{ needs.validate-release.outputs.is-prerelease == 'false' }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, github-release]
    environment: 
      name: pypi
      url: https://pypi.org/p/microsoft-mcp
    timeout-minutes: 10
    
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: ./release-artifacts

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./release-artifacts/dist/
          # Use trusted publishing with OIDC token
          # Requires PyPI project configuration
          skip-existing: true
          verbose: true

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi]
    if: always() && needs.publish-pypi.result == 'success'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Update changelog
        run: |
          # Update main changelog if utils script exists
          if [[ -f "scripts/changelog/update-changelog.py" ]]; then
            echo "Updating main changelog..."
            uv run python scripts/changelog/update-changelog.py --version=${{ needs.validate-release.outputs.version }}
          fi

      - name: Create follow-up PR for development
        if: github.ref == 'refs/heads/main' && needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          # Prepare development version (bump patch and add -dev suffix)
          VERSION="${{ needs.validate-release.outputs.version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=$((${VERSION_PARTS[2]} + 1))
          DEV_VERSION="$MAJOR.$MINOR.$PATCH-dev"
          
          # Create development branch
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          BRANCH_NAME="chore/bump-dev-version-$DEV_VERSION"
          git checkout -b "$BRANCH_NAME"
          
          # Update version to development version
          sed -i "s/^version = .*/version = \"$DEV_VERSION\"/" pyproject.toml
          git add pyproject.toml
          git commit -m "🚧 Bump development version to $DEV_VERSION

          This prepares the repository for the next development cycle after releasing v$VERSION.
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push origin "$BRANCH_NAME"
          
          # Create PR using GitHub CLI
          gh pr create \
            --title "🚧 Prepare development version $DEV_VERSION" \
            --body "Automated PR to bump version to development after releasing v$VERSION.

          ## Changes
          - Bump version in \`pyproject.toml\` to \`$DEV_VERSION\`
          
          This PR should be merged to prepare for the next development cycle.
          
          🤖 Generated with [Claude Code](https://claude.ai/code)" \
            --base main \
            --head "$BRANCH_NAME" \
            --label "automation,version-bump"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify release completion
        run: |
          echo "## 🎉 Release v${{ needs.validate-release.outputs.version }} Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ needs.validate-release.outputs.is-prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI**: https://pypi.org/project/microsoft-mcp/${{ needs.validate-release.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Package published to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub release created" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.validate-release.outputs.is-prerelease }}" == "false" ]]; then
            echo "- 🔄 Development version PR will be created automatically" >> $GITHUB_STEP_SUMMARY
          fi